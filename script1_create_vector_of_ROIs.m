clear, clc, close all

%% First generate a set of coordinates: these will be the "anchor points".
x_anchor = [-20, -26, -40, -42, -45, -45, -48, -16]; 
y_anchor = [-53, -48, -52, -46, -65, -69, -74, -86];
z_anchor = [-6,  -14, -18, -11, -4,  -1, 10, 16];

%coordinates are from the following studies (in order): %Konkle & Caramazza, 2013 (PHG or medial reference), Mahon et al., 2008 (mFG), ... 
% Julian et al., 2012 (FFA), Konkle & Oliva, 2012 (OTS-small), Konkle & Oliva, 2012 (ITG-small), ...
% Bracci et al., 2012 (LOTC-hand), Julian et al., 2012 (EBA), Konkle &
% Caramazza 2013 (lateral reference or TOS)

%% Spline: visualization and definition
% Fit a spline curve through the anchor points
% A spline is a function that connects different points, it's basically a
% curved line

t = 1:numel(x_anchor); % Create parametric values for interpolation
pp_x = spline(t, x_anchor); % Fit a spline for x-coordinates
pp_y = spline(t, y_anchor); % Fit a spline for y-coordinates
pp_z = spline(t, z_anchor); % Fit a spline for z-coordinates

% Evaluate the spline at finer intervals for visualization --> this is just
% to visualize the shape of the line
t_eval = linspace(1, numel(x_anchor), 1000);
x_spline = ppval(pp_x, t_eval); % Evaluate spline for x-coordinates
y_spline = ppval(pp_y, t_eval); % Evaluate spline for y-coordinates
z_spline = ppval(pp_z, t_eval); % Evaluate spline for z-coordinates

% Plot the spline curve --> again just for visualization
figure;
plot3(x_spline, y_spline, z_spline, 'r-', 'LineWidth', 2); % Plot spline curve
hold on;
plot3(x_anchor, y_anchor, z_anchor, 'bo', 'MarkerSize', 10); % Plot anchor points
xlabel('X'); ylabel('Y'); zlabel('Z'); % Label axes
title('Spline Fitting'); % Set title
legend('Spline Curve', 'Anchor Points'); % Add legend
grid on;
hold off;

% Compute arc length of the spline curve
arc_length = [0, cumsum(sqrt(diff(x_spline).^2 + diff(y_spline).^2 + diff(z_spline).^2))];

% Define the desired spacing between intermediate points (in mm), a.k.a.
% how distance the spheres should be with each other
spacing_mm = 3; % Desired distance between points

% Compute total arc length of the curve
total_arc_length = arc_length(end);

% Determine number of intermediate points
num_intermediate_points = ceil(total_arc_length / spacing_mm);
spline_length_ratio = linspace(0, 1, num_intermediate_points); % Generate interpolation ratios

% Interpolate points along the spline based on arc length
x_intermediate = interp1(arc_length / total_arc_length, x_spline, spline_length_ratio, 'spline');
y_intermediate = interp1(arc_length / total_arc_length, y_spline, spline_length_ratio, 'spline');
z_intermediate = interp1(arc_length / total_arc_length, z_spline, spline_length_ratio, 'spline');

% Display generated intermediate coordinates --> visualize the coordinates
% on Matlab command window
disp('Intermediate Points Coordinates:');
for i = 1:num_intermediate_points
    fprintf('sphere%d %f %f %f\n', i, x_intermediate(i), y_intermediate(i), z_intermediate(i));
end

%% Create ROIs
% Define sphere radius
ray_sphere = 3; % Sphere radius in mm (ray of 3 mm = sphere of 6 mm) 

% Load reference NIfTI image
niiFilePath = 'path\spmT_0001.nii'; %change this based on your own path (e.g., contrast all vs_base).
V = spm_vol(niiFilePath);

% Define output directory for generated spheres
output_dir = 'path\spheres\';

% Convert intermediate coordinates into array format
coordinate = [x_intermediate' y_intermediate' z_intermediate'];

%% save .nii files based on the coordinates generated by fitting the spline
% Iterate through the coordinates to create spherical ROIs
for i = 1:size(coordinate, 1)
    coord = coordinate(i, :); % Extract coordinate for current sphere
    
    % Initialize a zero matrix matching the dimensions of the reference image
    Y = zeros(V.dim);
    
    % Convert MNI coordinates to voxel indices using transformation matrix
    indice = V.mat \ [coord 1]';
    
    % Generate a 3D grid of voxel coordinates
    [X, Y, Z] = ndgrid(1:V.dim(1), 1:V.dim(2), 1:V.dim(3));
    
    % Create a binary sphere mask at the given coordinate
    sfera = sqrt((X - indice(1)).^2 + (Y - indice(2)).^2 + (Z - indice(3)).^2) <= ray_sphere;
    
    % Create a new NIfTI volume for the sphere
    Vroi = V;
    Vroi.fname = fullfile(output_dir, sprintf('roi_sphere%d.nii', i)); % Set output filename
    
    % Save the sphere as a NIfTI file
    spm_write_vol(Vroi, sfera);
end
